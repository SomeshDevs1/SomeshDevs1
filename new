public UserDto getUserDetails(Authentication authentication, Integer id) throws VAPServiceException {
    try {
        if (authentication instanceof BearerTokenAuthentication) {
            Map<String, Object> attributes = ((BearerTokenAuthentication) authentication).getTokenAttributes();
            return sgiamsvc.buildUserDtoFromToken(attributes);
        }
        // Fallback if DefaultOAuth2AuthenticatedPrincipal
        else if (authentication.getPrincipal() instanceof DefaultOAuth2AuthenticatedPrincipal principal) {
            return sgiamsvc.buildUserDtoFromToken(principal.getAttributes());
        } else {
            throw new VAPServiceException("User not available");
        }
    } catch (Exception e) {
        LOGGER.error("Error Fetching user details :", e);
        throw new VAPServiceException("Error Fetching user details");
    }
}

@Service
public class SGIAMUserService {

    public UserDto buildUserDtoFromToken(Map<String, Object> tokenAttributes) {
        UserDto userDto = new UserDto();

        // Example mapping (adjust keys based on actual SGIAM token structure)
        userDto.setFirstName((String) tokenAttributes.get("given_name"));
        userDto.setName((String) tokenAttributes.get("family_name"));
        userDto.setLoginSesame((String) tokenAttributes.get("preferred_username"));
        userDto.setUserGroup(parseUserGroups(tokenAttributes));
        userDto.setBusinessAreas(parseBusinessAreas(tokenAttributes));
        userDto.setUserModule(parseUserModules(tokenAttributes));
        // Add more fields as needed

        return userDto;
    }

    private List<BusinessGroupDto> parseUserGroups(Map<String, Object> attrs) {
        // convert token claim to userGroup list
    }

    private List<BusinessAreaDto> parseBusinessAreas(Map<String, Object> attrs) {
        // convert token claim to business area list
    }

    private List<ModuleDto> parseUserModules(Map<String, Object> attrs) {
        // convert token claim to module list
    }
}