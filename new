private List<ModuleDto> extractUserModules(Map<String, Object> tokenAttributes, int idModule) {
    return Optional.ofNullable((Map<String, Object>) tokenAttributes.get("authentication"))
        .map(auth -> (Map<String, Object>) auth.get("attributes"))
        .map(attributes -> (Map<String, Object>) attributes.get("user_authorization"))
        .orElse(List.of())
        .stream()
        .flatMap(userAuthorization -> Optional.ofNullable((List<Map<String, Object>>) userAuthorization.get("permissions"))
            .orElse(List.of())
            .stream()
            .map(permission -> Optional.ofNullable((Map<String, Object>) permission.get("constraints"))
                .orElse(List.of())
                .stream()
                .map(constraint -> {
                    ModuleDto moduleDto = new ModuleDto();
                    moduleDto.setId(idModule);
                    moduleDto.setModuleName((String) constraint.get("ApplicationRole"));
                    moduleDto.setApplicationRole((String) constraint.get("User Type"));
                    moduleDto.setBusinessRole((String) constraint.get("Business Role"));
                    moduleDto.setModule((String) constraint.get("MODULE"));
                    return moduleDto;
                })
            )
        )
        .collect(Collectors.toList());
}
