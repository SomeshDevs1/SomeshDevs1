package com.sgss.ast.fvs.vap.link.followup.entities;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
public class AuditListenerTest {

    @Autowired
    private PersistentObjectRepository persistentObjectRepository;

    private PersistentObject persistentObject;

    @BeforeEach
    void setUp() {
        // Set up the PersistentObject before each test
        persistentObject = new PersistentObject();
        persistentObject.setId(1L);
        // Initially, we don't set the dates because the listener should handle this
    }

    @Test
    void testBeforeCreateOperation() {
        // Save the PersistentObject, which should trigger the @PrePersist method
        persistentObjectRepository.save(persistentObject);

        // Retrieve the entity from the database
        PersistentObject savedObject = persistentObjectRepository.findById(persistentObject.getId()).orElse(null);

        // Assert that the dateCreated and dateModified are set (should be the same when the entity is created)
        assertNotNull(savedObject);
        assertNotNull(savedObject.getDateCreated());
        assertNotNull(savedObject.getDateModified());
        assertEquals(savedObject.getDateCreated(), savedObject.getDateModified(), "DateCreated and DateModified should be the same when created");
    }

    @Test
    void testBeforeUpdateOperation() {
        // Save the PersistentObject first
        persistentObjectRepository.save(persistentObject);

        // Store the initial dateModified
        Date initialDateModified = persistentObject.getDateModified();

        // Modify the object
        persistentObject.setId(2L); // Example of modification
        persistentObjectRepository.save(persistentObject);

        // Retrieve the updated entity
        PersistentObject updatedObject = persistentObjectRepository.findById(persistentObject.getId()).orElse(null);

        // Assert that dateModified has been updated (but dateCreated remains unchanged)
        assertNotNull(updatedObject);
        assertNotEquals(initialDateModified, updatedObject.getDateModified(), "DateModified should be updated on update");
        assertEquals(updatedObject.getDateCreated(), initialDateModified, "DateCreated should not be modified on update");
    }

    @Test
    void testBeforeRemoveOperation() {
        // Save the PersistentObject first
        persistentObjectRepository.save(persistentObject);

        // Store the initial dateModified
        Date initialDateModified = persistentObject.getDateModified();

        // Remove the object
        persistentObjectRepository.delete(persistentObject);

        // Retrieve the deleted entity (this should be null because it's deleted)
        PersistentObject removedObject = persistentObjectRepository.findById(persistentObject.getId()).orElse(null);

        // The entity is deleted, but we want to ensure dateModified was set before removal (in the listener)
        assertNull(removedObject);
        // Optionally, you can check the state before removal if your repository supports soft deletes, 
        // but since it’s removed, there’s no further verification for dateModified after deletion.
    }
}