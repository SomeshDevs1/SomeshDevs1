package com.sgss.ast.fvs.vap.link.followup.entities;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import javax.persistence.EntityManager;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
public class AuditListenerTest {

    @Autowired
    private EntityManager entityManager;

    private PersistentObject persistentObject;

    @BeforeEach
    void setUp() {
        // Create a new PersistentObject for testing
        persistentObject = new PersistentObject();
    }

    @Test
    void testBeforeCreateOperation() {
        // Save the PersistentObject, which should trigger the @PrePersist method
        entityManager.persistAndFlush(persistentObject);

        // Retrieve the entity from the database
        PersistentObject savedObject = entityManager.find(PersistentObject.class, persistentObject.getId());

        // Assert that dateCreated and dateModified are set correctly
        assertNotNull(savedObject);
        assertNotNull(savedObject.getDateCreated());
        assertNotNull(savedObject.getDateModified());
        assertEquals(savedObject.getDateCreated(), savedObject.getDateModified(), "DateCreated and DateModified should be the same when created");
    }

    @Test
    void testBeforeUpdateOperation() {
        // Save the PersistentObject first
        entityManager.persistAndFlush(persistentObject);

        // Store the initial dateModified
        Date initialDateModified = persistentObject.getDateModified();

        // Update the object (just an example update, you could modify any field)
        persistentObject.setId(2L);
        entityManager.persistAndFlush(persistentObject);

        // Retrieve the updated entity
        PersistentObject updatedObject = entityManager.find(PersistentObject.class, persistentObject.getId());

        // Assert that dateModified is updated (but dateCreated should remain the same)
        assertNotNull(updatedObject);
        assertNotEquals(initialDateModified, updatedObject.getDateModified(), "DateModified should be updated on update");
        assertEquals(updatedObject.getDateCreated(), persistentObject.getDateCreated(), "DateCreated should not be modified on update");
    }

    @Test
    void testBeforeRemoveOperation() {
        // Save the PersistentObject first
        entityManager.persistAndFlush(persistentObject);

        // Store the initial dateModified
        Date initialDateModified = persistentObject.getDateModified();

        // Remove the object (this will call the @PreRemove method)
        entityManager.remove(persistentObject);

        // Retrieve the removed entity (it should be null since it was deleted)
        PersistentObject removedObject = entityManager.find(PersistentObject.class, persistentObject.getId());

        // The entity is deleted, so assert that it is null
        assertNull(removedObject);
        // The listener sets dateModified before removal, but since it is deleted, we can't check the exact value after removal.
    }
}