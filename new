package com.sgss.ast.fvs.vap.link.followup.entities.repo;

import com.sgss.ast.fvs.vap.link.followup.entities.CommentList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.jdbc.Sql;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
public class CommentListRepositoryTest {

    @Autowired
    private CommentListRepository commentListRepository;

    private CommentList comment1;
    private CommentList comment2;
    private CommentList comment3;

    @BeforeEach
    void setUp() {
        // Set up test data before each test method
        comment1 = new CommentList();
        comment1.setIsActive(true);
        comment1.setBusiness("Business1");

        comment2 = new CommentList();
        comment2.setIsActive(true);
        comment2.setBusiness("Business2");

        comment3 = new CommentList();
        comment3.setIsActive(false);  // This one will not be selected in the test
        comment3.setBusiness("Business1");

        // Save the entities to the repository
        commentListRepository.saveAll(Arrays.asList(comment1, comment2, comment3));
    }

    @Test
    void testFindByBusinessAndIsActive() {
        // Test the findByBusinessAndIsActive method
        List<CommentList> activeCommentsForBusiness1 = commentListRepository.findByBusinessAndIsActive("Business1");

        // Assert that the returned list contains only the active comment for Business1
        assertNotNull(activeCommentsForBusiness1);
        assertEquals(1, activeCommentsForBusiness1.size());
        assertEquals("Business1", activeCommentsForBusiness1.get(0).getBusiness());
        assertTrue(activeCommentsForBusiness1.get(0).getIsActive());
    }

    @Test
    void testFindByAreasAndIsActive() {
        // Test the findByAreasAndIsActive method
        List<CommentList> activeCommentsForBusinesses = commentListRepository.findByAreasAndIsActive(Arrays.asList("Business1", "Business2"));

        // Assert that both active comments for Business1 and Business2 are returned
        assertNotNull(activeCommentsForBusinesses);
        assertEquals(2, activeCommentsForBusinesses.size());

        // Check if the businesses returned match
        assertTrue(activeCommentsForBusinesses.stream().anyMatch(c -> "Business1".equals(c.getBusiness()) && c.getIsActive()));
        assertTrue(activeCommentsForBusinesses.stream().anyMatch(c -> "Business2".equals(c.getBusiness()) && c.getIsActive()));
    }
}