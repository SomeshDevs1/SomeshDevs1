@SuppressWarnings("unchecked")
private List<ModuleDto> extractUserModules(Map<String, Object> tokenAttributes, int idModule) {
    List<ModuleDto> moduleDtos = new ArrayList<>();

    try {
        // Step 1: Navigate into authentication ➝ attributes ➝ user_authorization
        Map<String, Object> authentication = (Map<String, Object>) tokenAttributes.get("authentication");
        if (authentication == null) return moduleDtos;

        Map<String, Object> attributes = (Map<String, Object>) authentication.get("attributes");
        if (attributes == null) return moduleDtos;

        Map<String, Object> userAuthorization = (Map<String, Object>) attributes.get("user_authorization");
        if (userAuthorization == null) return moduleDtos;

        // Step 2: Extract permissions
        List<Map<String, Object>> permissions = (List<Map<String, Object>>) userAuthorization.get("permissions");
        if (permissions == null) return moduleDtos;

        for (Map<String, Object> permission : permissions) {
            // Step 3: Extract constraints
            List<Map<String, Object>> constraints = (List<Map<String, Object>>) permission.get("constraints");
            if (constraints == null) continue;

            for (Map<String, Object> constraint : constraints) {
                ModuleDto moduleDto = new ModuleDto();
                moduleDto.setId(idModule);
                moduleDto.setModuleName((String) constraint.get("ApplicationRole"));
                moduleDto.setApplicationRole((String) constraint.get("User Type"));
                moduleDto.setBusinessRole((String) constraint.get("Business Role"));
                moduleDto.setModule((String) constraint.get("MODULE"));

                moduleDtos.add(moduleDto);
            }
        }

    } catch (Exception e) {
        log.error("Error extracting user modules from token", e);
    }

    return moduleDtos;
}