import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

class JpaCallReportRestServiceDaoImplTest {

    @Mock
    private WebClient webClient;

    @Mock
    private WebClient.RequestBodyUriSpec requestBodyUriSpec;

    @Mock
    private WebClient.RequestBodySpec requestBodySpec;

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private JpaCallReportRestServiceDaoImpl serviceDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        // also inject baseurlServices so it's not null
        serviceDao.baseurlServices = "http://dummy-url";
    }

    @Test
    void testConsumeReportApi() {
        // Arrange
        List<ReportDataDto> reportDataList = Collections.singletonList(new ReportDataDto());
        String mockResponse = "mockResponse";

        when(webClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(any(String.class))).thenReturn(requestBodySpec);
        when(requestBodySpec.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)).thenReturn(requestBodySpec);

        // ðŸ‘‡ FIX: return a RequestHeadersSpec
        when(requestBodySpec.bodyValue(any())).thenReturn(requestHeadersSpec);

        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(String.class)).thenReturn(Mono.just(mockResponse));

        // Act
        String response = serviceDao.consumeReportApi(reportDataList);

        // Assert
        assertEquals(mockResponse, response);
    }
}