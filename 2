private List<ModuleDto> extractUserModules(Map<String, Object> tokenAttributes, int idModule) {
    List<ModuleDto> moduleDtos = new ArrayList<>();

    try {
        List<Map<String, Object>> userAuthorizationList =
            (List<Map<String, Object>>) tokenAttributes.get("user_authorization");

        if (userAuthorizationList == null) return moduleDtos;

        userAuthorizationList.stream()
            .map(authEntry -> (List<Map<String, Object>>) authEntry.get("permissions"))
            .filter(Objects::nonNull)
            .flatMap(List::stream)
            .map(permission -> (List<Map<String, Object>>) permission.get("constraints"))
            .filter(Objects::nonNull)
            .forEach(constraints -> {
                ModuleDto moduleDto = new ModuleDto();
                moduleDto.setId(String.valueOf(idModule));

                constraints.stream()
                    .filter(constraint -> constraint.get("name") != null && constraint.get("values") != null)
                    .forEach(constraint -> {
                        String name = (String) constraint.get("name");
                        List<String> values = (List<String>) constraint.get("values");

                        if (values.isEmpty()) return;

                        String value = values.get(0); // Take the first value

                        switch (name) {
                            case "User Type":
                                moduleDto.setUserType(value);
                                break;
                            case "Business Role":
                                moduleDto.setBusinessRole(value);
                                break;
                            case "MODULE":
                                moduleDto.setModuleName(value);
                                break;
                            case "ApplicationRole":
                                moduleDto.setApplicationRole(value);
                                break;
                            // Add more cases if needed
                        }
                    });

                moduleDtos.add(moduleDto);
            });

    } catch (Exception e) {
        System.err.println("Error extracting user modules: " + e.getMessage());
    }

    return moduleDtos;
}