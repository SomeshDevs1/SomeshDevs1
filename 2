import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.*;
import org.springframework.batch.core.launch.JobLauncher;

import static org.junit.jupiter.api.Assertions.assertEquals;

class JpaIncidentServiceDaoImplTest {

    @Mock
    private Job jobIncident;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private JobExecution jobExecution;

    @InjectMocks
    private JpaIncidentServiceDaoImpl serviceDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCheckAndCreateIncidentForFailedJobs_Success() throws Exception {
        // Arrange
        ExitStatus expectedExitStatus = ExitStatus.COMPLETED;
        when(jobLauncher.run(any(Job.class), any(JobParameters.class))).thenReturn(jobExecution);
        when(jobExecution.getExitStatus()).thenReturn(expectedExitStatus);

        // Act
        String result = serviceDao.checkAndCreateIncidentForFailedJobs();

        // Assert
        assertEquals(expectedExitStatus.getExitCode(), result);
    }

    @Test
    void testCheckAndCreateIncidentForFailedJobs_Exception() throws Exception {
        // Arrange
        when(jobLauncher.run(any(Job.class), any(JobParameters.class)))
                .thenThrow(new JobExecutionAlreadyRunningException("Job already running"));

        // Act
        String result = serviceDao.checkAndCreateIncidentForFailedJobs();

        // Assert (should return UNKNOWN because of exception)
        assertEquals(ExitStatus.UNKNOWN.getExitCode(), result);
    }
}