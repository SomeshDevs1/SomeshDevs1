@SuppressWarnings("unchecked")
private List<ModuleDto> extractUserModules(Map<String, Object> tokenAttributes, int idModule) {
    List<ModuleDto> moduleDtos = new ArrayList<>();

    try {
        // Step 1: Get user_authorization (as a List)
        List<Map<String, Object>> userAuthorizationList =
            (List<Map<String, Object>>) tokenAttributes.get("user_authorization");

        if (userAuthorizationList == null) return moduleDtos;

        for (Map<String, Object> authEntry : userAuthorizationList) {
            List<Map<String, Object>> permissions =
                (List<Map<String, Object>>) authEntry.get("permissions");

            if (permissions == null) continue;

            for (Map<String, Object> permission : permissions) {
                List<Map<String, Object>> constraints =
                    (List<Map<String, Object>>) permission.get("constraints");

                if (constraints == null) continue;

                ModuleDto moduleDto = new ModuleDto();
                moduleDto.setId(idModule);

                for (Map<String, Object> constraint : constraints) {
                    String name = (String) constraint.get("name");
                    List<String> values = (List<String>) constraint.get("values");

                    if (name == null || values == null || values.isEmpty()) continue;

                    String value = values.get(0); // Take the first value

                    switch (name) {
                        case "User Type" -> moduleDto.setApplicationRole(value);
                        case "Business Role" -> moduleDto.setBusinessRole(value);
                        case "MODULE" -> moduleDto.setModule(value);
                        case "ApplicationRole" -> moduleDto.setModuleName(value);
                        // You can add more if needed
                    }
                }

                moduleDtos.add(moduleDto);
            }
        }

    } catch (Exception e) {
        log.error("Error extracting ModuleDto from SGIAM token", e);
    }

    return moduleDtos;
}